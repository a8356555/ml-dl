{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"pytorch","provenance":[],"authorship_tag":"ABX9TyOv3khYWdFhuTXlNtCO+xan"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"aYBzTFpDaKpM","colab_type":"text"},"source":["用numpy建model"]},{"cell_type":"code","metadata":{"id":"OasqpRb5S3de","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","\n","N,D_in,H,D_out=64,1000,100,10\n","\n","# Create random input and output data\n","x = np.random.randn(N,D_in) #這個batch64個row/examples，1000個特徵=>64x1000\n","y = np.random.randn(N,D_out)#這個batch64個row/examples，10個output概率分布=>64x10\n","\n","# Randomly initialize weights\n","w1 = np.random.randn(D_in,H) #1000x100 =>第一個全連接層 把1000個特徵投射/轉換成100個 >>>64x1000 X 1000x100 = 64x100\n","w2 = np.random.randn(H,D_out)#100x10 =>輸出層 把100個特徵輸出成10個概率分布 >>>64x100 X 100x10 = 64x10\n","\n","learning_rate = 1e-6\n","for t in range(500):\n","  # Forward pass: compute predicted y\n","  h = x.dot(w1)\n","  h_relu = np.maximum(h,0) #激活函數，只做值的轉換篩選，不做特徵投射\n","  y_pred = h_relu.dot(w2)\n","\n","  # Compute and print loss\n","  loss = np.square(y_pred - y).sum()\n","  print(t,loss)\n","\n","  # Backprop to compute gradients of w1 and w2 with respect to loss\n","  grad_y_pred = 2.0*(y_pred-y)\n","  grad_w2 = h_relu.T.dot(grad_y_pred)\n","  grad_h_relu = grad_y_pred.dot(w2.T)\n","  grad_h = grad_h_relu.copy()\n","  grad_h[h<0]=0\n","  grad_w1 = x.T.dot(grad_h)\n","\n","  w1 -= learning_rate * grad_w1\n","  w2 -= learning_rate * grad_w2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aBVKEjrGaPo8","colab_type":"text"},"source":["使用Autograd package\n",". We do this within the torch.no_grad() context manager, because we do not want these actions to be recorded for our next calculation of the gradient."]},{"cell_type":"code","metadata":{"id":"ZL5bggN7V53f","colab_type":"code","colab":{}},"source":["import torch\n","\n","dtype = torch.float\n","device = torch.device('cpu')\n","# device = torch.device(\"cuda:0\") # Uncomment this to run on GPU\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","N, D_in, H, D_out = 64, 1000, 100, 10\n","# Create random Tensors to hold input and outputs.\n","# Setting requires_grad=False indicates that we do not need to compute gradients\n","# with respect to these Tensors during the backward pass.\n","x = torch.randn(N, D_in, device=device, dtype=dtype)\n","y = torch.randn(N, D_out, device=device, dtype=dtype)\n","\n","# Create random Tensors for weights.\n","# Setting requires_grad=True indicates that we want to compute gradients with\n","# respect to these Tensors during the backward pass.\n","w1 = torch.randn(D_in, H, device=device, dtype=dtype, requires_grad=True)\n","w2 = torch.randn(H, D_out, device=device, dtype=dtype, requires_grad=True)\n","\n","learning_rate = 1e-6\n","for t in range(500):\n","    # Forward pass: compute predicted y using operations on Tensors; these\n","    # are exactly the same operations we used to compute the forward pass using\n","    # Tensors, but we do not need to keep references to intermediate values since\n","    # we are not implementing the backward pass by hand.\n","    y_pred = x.mm(w1).clamp(min=0).mm(w2)\n","\n","    # Compute and print loss using operations on Tensors.\n","    # Now loss is a Tensor of shape (1,)\n","    # loss.item() gets the scalar value held in the loss.\n","    loss = (y_pred-y).pow(2).sum()\n","    if t % 100 ==99:\n","      print(t,loss.item())\n","    \n","    # Use autograd to compute the backward pass. This call will compute the\n","    # gradient of loss with respect to all Tensors with requires_grad=True.\n","    # After this call w1.grad and w2.grad will be Tensors holding the gradient\n","    # of the loss with respect to w1 and w2 respectively.\n","    loss.backward()\n","\n","    # Manually update weights using gradient descent. Wrap in torch.no_grad()\n","    # because weights have requires_grad=True, but we don't need to track this\n","    # in autograd.\n","    # An alternative way is to operate on weight.data and weight.grad.data.\n","    # Recall that tensor.data gives a tensor that shares the storage with\n","    # tensor, but doesn't track history.\n","    # You can also use torch.optim.SGD to achieve this.\n","    with torch.no_grad(): \n","      #It will reduce memory consumption for computations that would otherwise have requires_grad=True.\n","      #In this mode, the result of every computation will have requires_grad=False, even when the inputs have requires_grad=True.\n","      w1 -= learning_rate*w1.grad\n","      w2 -= learning_rate*w2.grad\n","\n","      # Manually zero the gradients after updating weights\n","      w1.grad.zero_()\n","      w2.grad.zero_()\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kIqEVND1aULn","colab_type":"text"},"source":["Custom new autograd functions\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"88-RsAnfab3U","colab_type":"code","colab":{}},"source":["import torch\n","class MyReLU(torch.autograd.Function):\n","    \"\"\"\n","    We can implement our own custom autograd Functions by subclassing\n","    torch.autograd.Function and implementing the forward and backward passes\n","    which operate on Tensors.\n","    \"\"\"\n","\n","    @staticmethod\n","    def forward(ctx, input): \n","      \"\"\"\n","      In the forward pass we receive a Tensor containing the input and return\n","      a Tensor containing the output. ctx is a context object that can be used\n","      to stash information for backward computation. You can cache arbitrary\n","      objects for use in the backward pass using the ctx.save_for_backward method.\n","      \"\"\"\n","      ctx.save_for_backward(input)\n","      return input.clamp(min=0)\n","\n","    @staticmethod\n","    def backward(ctx, grad_output):\n","      \"\"\"\n","      In the backward pass we receive a Tensor containing the gradient of the loss\n","      with respect to the output, and we need to compute the gradient of the loss\n","      with respect to the input.\n","      \"\"\"\n","      input,=ctx.saved_tensors #???\n","      grad_input = grad_output.clone()\n","      grad_input[input<0]=0\n","      return grad_input\n","\n","dtype = torch.float\n","device = torch.device(\"cpu\")\n","# device = torch.device(\"cuda:0\") # Uncomment this to run on GPU\n","\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","N, D_in, H, D_out = 64, 1000, 100, 10\n","\n","# Create random Tensors to hold input and outputs.\n","x = torch.randn(N, D_in, device=device, dtype=dtype)\n","y = torch.randn(N, D_out, device=device, dtype=dtype)\n","\n","# Create random Tensors for weights.\n","w1 = torch.randn(D_in, H, device=device, dtype=dtype, requires_grad=True)\n","w2 = torch.randn(H, D_out, device=device, dtype=dtype, requires_grad=True)\n","\n","learning_rate = 1e-6\n","for t in range(500):\n","    # To apply our Function, we use Function.apply method. We alias this as 'relu'.\n","    relu = MyReLU.apply\n","\n","    # Forward pass: compute predicted y using operations; we compute\n","    # ReLU using our custom autograd operation.\n","    y_pred = relu(x.mm(x1)).mm(x2)\n","\n","    # Compute and print loss\n","    loss = (y_pred - y).pow(2).sum()\n","    if t % 100 == 99:\n","        print(t, loss.item())   \n","\n","\n","    # Use autograd to compute the backward pass.\n","    loss.backward()\n","\n","    # Update weights using gradient descent\n","    with torch.no_grad():\n","        w1 -= learning_rate * w1.grad\n","        w2 -= learning_rate * w2.grad\n","\n","        # Manually zero the gradients after updating weights\n","        w1.grad.zero_()\n","        w2.grad.zero_()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AO-hCzgEeDhF","colab_type":"text"},"source":["nn module & optim package"]},{"cell_type":"code","metadata":{"id":"2J-e5MD-eHdu","colab_type":"code","colab":{}},"source":["import torch\n","\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","N, D_in, H, D_out = 64, 1000, 100, 10\n","\n","# Create random Tensors to hold inputs and outputs\n","x = torch.randn(N, D_in)\n","y = torch.randn(N, D_out)\n","\n","# Use the nn package to define our model as a sequence of layers. nn.Sequential\n","# is a Module which contains other Modules, and applies them in sequence to\n","# produce its output. Each Linear Module computes output from input using a\n","# linear function, and holds internal Tensors for its weight and bias.\n","\n","model = torch.nn.Sequential(\n","    torch.nn.Linear(D_in,H),\n","    torch.nn.ReLU(),\n","    torch.n.ReLU(),\n","    torch.nn.Linear(H,D_out)\n",")\n","\n","# The nn package also contains definitions of popular loss functions; in this\n","# case we will use Mean Squared Error (MSE) as our loss function.\n","\n","loss_fn = torch.nn.MSELoss(reduction='sum')\n","\n","learning_rate = 1e-4\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","for t in range(500):\n","    # Forward pass: compute predicted y by passing x to the model. Module objects\n","    # override the __call__ operator so you can call them like functions. When\n","    # doing so you pass a Tensor of input data to the Module and it produces\n","    # a Tensor of output data.\n","    y_pred = model(x)\n","\n","    # Compute and print loss. We pass Tensors containing the predicted and true\n","    # values of y, and the loss function returns a Tensor containing the\n","    # loss.\n","    loss = loss_fn(y_pred,y)\n","     if t % 100 == 99:\n","        print(t, loss.item())\n","\n","    # Zero the gradients before running the backward pass.\n","    model.zero_grad()  \n","\n","    # Backward pass: compute gradient of the loss with respect to all the learnable\n","    # parameters of the model. Internally, the parameters of each Module are stored\n","    # in Tensors with requires_grad=True, so this call will compute gradients for\n","    # all learnable parameters in the model.\n","    loss.backward()   \n","\n","    # Update the weights using gradient descent. Each parameter is a Tensor, so\n","    # we can access its gradients like we did before\n","    \n","    #with torch.no_grad():\n","    #  for param in model.parameters():\n","    #    param -= learning_rate * param.grad    \n","    # Calling the step function on an Optimizer makes an update to its\n","    # parameters\n","    optimizer.step()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xiXUoAnHgA1J","colab_type":"text"},"source":["custom nn Modules"]},{"cell_type":"code","metadata":{"id":"Nu_2xlv4gEfD","colab_type":"code","colab":{}},"source":["import torch\n","\n","class TwoLayerNet(torch.nn.Module):\n","  def __init__(self, D_in, H, D_out): #input特徵維度、轉換到隱藏層的維度、輸出維度\n","    \"\"\"\n","    In the constructor we instantiate two nn.Linear modules and assign them as\n","    member variables.\n","    \"\"\"  \n","    super(TwoLayerNet, self).__init__() #???\n","    self.linear1 = torch.nn.Linear(D_in, H)\n","    self.linear2 = torch.nn.Linear(H, D_out)\n","\n","  def forward(self,x):\n","    \"\"\"\n","    In the forward function we accept a Tensor of input data and we must return\n","    a Tensor of output data. We can use Modules defined in the constructor as\n","    well as arbitrary operators on Tensors.\n","    \"\"\"    \n","    h_relu = self.linear1(x).clamp(min=0)\n","    y_pred = self.linear2(h_relu)\n","    return y_pred\n","\n","\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","N, D_in, H, D_out = 64, 1000, 100, 10\n","\n","# Create random Tensors to hold inputs and outputs\n","x = torch.randn(N, D_in)\n","y = torch.randn(N, D_out)\n","\n","# Construct our model by instantiating the class defined above\n","model = TwoLayerNet(D_in, H, D_out)\n","\n","# Construct our loss function and an Optimizer. The call to model.parameters()\n","# in the SGD constructor will contain the learnable parameters of the two\n","# nn.Linear modules which are members of the model.\n","criterion = torch.nn,MSELoss(reduction='sum')\n","optimizer = torch.optim.SGD(model.parameters(),le=1e-4)\n","for t in range(500):\n","    # Forward pass: Compute predicted y by passing x to the model\n","    y_pred = model(x)\n","\n","    # Compute and print loss\n","    loss = criterion(y_pred, y)\n","    if t % 100 == 99:\n","      print(t, loss.item())\n","\n","    # Zero gradients, perform a backward pass, and update the weights.\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P2teQwjllBlY","colab_type":"code","colab":{}},"source":["Control Flow + Weight Sharing\n","用Loop就可以輕易控制中間隱藏層"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g8bny50DkG9R","colab_type":"code","colab":{}},"source":["import random\n","import torch\n","\n","class DynamicNet(torch.nn.Module):\n","  def __init__(self, D_in, H, D_out):\n","    \"\"\"\n","    In the constructor we construct three nn.Linear instances that we will use\n","    in the forward pass.\n","    \"\"\"\n","    super(DynamicNet, self).__init__()\n","    self.input_linear = torch.nn.Linear(D_in,H)\n","    self.middle_linear = torch.nn.Linear(H,H)\n","    self.output_linear = torch.nn.Linear(H,D_out)\n","\n","  def forward(self, x):\n","    \"\"\"\n","    For the forward pass of the model, we randomly choose either 0, 1, 2, or 3\n","    and reuse the middle_linear Module that many times to compute hidden layer\n","    representations.\n","\n","    Since each forward pass builds a dynamic computation graph, we can use normal\n","    Python control-flow operators like loops or conditional statements when\n","    defining the forward pass of the model.\n","\n","    Here we also see that it is perfectly safe to reuse the same Module many\n","    times when defining a computational graph. This is a big improvement from Lua\n","    Torch, where each Module could be used only once.\n","    \"\"\"    \n","    h_relu = self.input_linear(x).clamp(min=0)\n","    for _ in range(random.randint(0,3)):\n","      h_relu = self.middel_linear(h_relu).clamp(min=0)\n","    y_pred = self.output_linear(h_relu)\n","    return y_pred\n","\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","N, D_in, H, D_out = 64, 1000, 100, 10\n","\n","# Create random Tensors to hold inputs and outputs\n","x = torch.randn(N, D_in)\n","y = torch.randn(N, D_out)\n","\n","# Construct our model by instantiating the class defined above\n","model = DynamicNet(D_in, H, D_out)\n","\n","# Construct our loss function and an Optimizer. Training this strange model with\n","# vanilla stochastic gradient descent is tough, so we use momentum\n","criterion = torch.nn.MSELoss(reduction='sum')\n","optimizer = torch.optim.SGD(model.parameters(), lr=1e-4, momentum=0.9)\n","for t in range(500):\n","    # Forward pass: Compute predicted y by passing x to the model\n","    y_pred = model(x)\n","\n","    # Compute and print loss\n","    loss = criterion(y_pred, y)\n","    if t % 100 == 99:\n","        print(t, loss.item())\n","\n","    # Zero gradients, perform a backward pass, and update the weights.\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gAtQ6Ea2mfFi","colab_type":"text"},"source":["dataset"]},{"cell_type":"code","metadata":{"id":"BzFx9FHTdaNL","colab_type":"code","colab":{}},"source":["from __future__ import print_function,division\n","import os\n","import torch\n","import pandas as pd\n","from skimage import io,transform\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from torch.utils.data import Dataset, DataLoader\n","from torchvision import transforms, utils\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","plt.ion()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AnbDtjTJjbJG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1594365281244,"user_tz":-480,"elapsed":735,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"e5376f63-1240-49ff-c185-452626f8c70d"},"source":["landmarks_frame = pd.read_csv('/face_landmarks.csv')\n","\n","n = 65\n","img_name = landmarks_frame.iloc[n, 0]\n","landmarks = landmarks_frame.iloc[n, 1:]\n","landmarks = np.asarray(landmarks)\n","landmarks = landmarks.astype('float').reshape(-1, 2)\n","\n","print('Image name :　{}'.format(img_name))\n","print('Landmarks shape : {}'.format(landmarks.shape))\n","print('First 4 Landmarks : {}'.format(landmarks[:4]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Image name :　person-7.jpg\n","Landmarks shape : (68, 2)\n","First 4 Landmarks : [[32. 65.]\n"," [33. 76.]\n"," [34. 86.]\n"," [34. 97.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z-3j0qGVdqjN","colab_type":"code","colab":{}},"source":["def show_landmarks(image,landmarks):\n","  \"\"\"show image with landmarks\"\"\"\n","  plt.imshow(image)\n","  plt.scatter(landmarks[:,0],landmarks[:,1],s=10,maker='.',c='r')\n","  plt.pause(0.001)\n","\n","  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N4KW0mK9yLfC","colab_type":"code","colab":{}},"source":["class FaceLLandmarksDataset(Dataset):\n","  def __init__(self,csv_file,root_dir,transform=None):\n","    self.landmarks_frame = pd.read_csv(csv_file)\n","    self.root_dir = root_dir\n","    self.transform = transform\n","\n","  def __len__(self):\n","    return len(self.landmarks_frame)\n","\n","  def __getitiem__(self,idx):\n","    if torch.is_tensor(idx):\n","      idx = idx.to_list()\n","\n","      img_name = os.path.join(self.root_dir,self.landmarks_frame.iloc[idx,0])\n","      image = io.imread(img_name)\n","      landmarks = self.landmarks_frame.iloc[idx,1:]\n","      landmarks = np.asarray([landmarks])\n","      landmarks = landmarks.astype('float').reshape(-1,2)\n","      sample = {'image':image, 'landmarks':landmarks}\n","\n","      if self.transform:\n","        sample = self.transform(sample)\n","\n","      return sample"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nkujHd8yCdPP","colab_type":"code","colab":{}},"source":["from torch import nn\n","\n","class Mnist_Logistic(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.weights = nn.Parameter(torch.randn(784,10))/math"],"execution_count":null,"outputs":[]}]}