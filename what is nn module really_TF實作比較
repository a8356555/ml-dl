{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"what is nn module really&TF實作比較","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNBe7UAIV8PpkAZ6Rxbx/og"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dSvLz_htnJsr","colab_type":"text"},"source":["We will use pathlib for dealing with paths (part of the Python 3 standard library), and will download the dataset using requests. "]},{"cell_type":"code","metadata":{"id":"6BJZLN1nnGAs","colab_type":"code","colab":{}},"source":["from pathlib import Path\n","import requests\n","\n","data_path = Path(\"data\")\n","path = data_path/\"mnist\"\n","\n","path.mkdir(parents=True, exist_ok=True)\n","\n","url = \"http://deeplearning.net/data/mnist/\"\n","filename = \"mnist.pkl.gz\"\n","\n","if not (path/filename).exists():\n","  content = requests.get(url+filename).content\n","  (path/filename).open(\"wb\").write(content)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JGgGPdQ8Q3Nu","colab_type":"code","colab":{}},"source":["import pickle\n","import gzip\n","\n","with gzip.open((path/filename), \"rb\") as f:\n","  ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=\"latin-1\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-6SLXI-3oEqa","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595490563481,"user_tz":-480,"elapsed":1882,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["import pickle\n","import gzip\n","\n","with gzip.open((path/filename).as_posix(), \"rb\") as f:\n","  ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=\"latin-1\")"],"execution_count":123,"outputs":[]},{"cell_type":"code","metadata":{"id":"H_scoZg2pC-K","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1595467518241,"user_tz":-480,"elapsed":930,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"e6441c41-31d6-4264-f913-7ce563ea5e45"},"source":["from matplotlib import pyplot\n","import numpy as np\n","\n","pyplot.imshow(x_train[0].reshape((28,28)),cmap=\"gray\")\n","print(x_train.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(50000, 784)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WgSoCKh2pynp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"executionInfo":{"status":"ok","timestamp":1595467527891,"user_tz":-480,"elapsed":3116,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"a6d34265-e0c6-441d-c57c-44c266752b50"},"source":["import torch\n","x_train, y_train, x_valid, y_valid = map(\n","    torch.tensor, (x_train, y_train, x_valid, y_valid)\n",")\n","n, c = x_train.shape\n","print(x_train, y_train)\n","print(x_train.shape)\n","print(y_train.min(), y_train.max())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n","        [0., 0., 0.,  ..., 0., 0., 0.],\n","        [0., 0., 0.,  ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0.,  ..., 0., 0., 0.],\n","        [0., 0., 0.,  ..., 0., 0., 0.],\n","        [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])\n","torch.Size([50000, 784])\n","tensor(0) tensor(9)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Jn0jfi_xqdlD","colab_type":"code","colab":{}},"source":["import math\n","weights = torch.randn(784,10)\n","weights.requires_grad_()\n","bias = torch.zeros(10,requires_grad=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UpreaGPGuczk","colab_type":"code","colab":{}},"source":["def log_softmax(x):\n","  return x-x.exp().sum(-1).log().unsqueeze(-1)\n","#sum(-1):row-sum，沿著每個row/example自身把不同特徵加總起來\n","#unsqueeze(-1)把一維64個元素的陣列轉化為64x1的二維振烈\n","def model(xb):\n","    return log_softmax(xb @ weights + bias)\n","#@代表dot product"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UWGOSwDQplm2","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595487627772,"user_tz":-480,"elapsed":949,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["bs = 64  # batch size\n","\n","xb = x_train[0:bs]  # a mini-batch from x\n","preds = model(xb)  # predictions\n","# preds.shape\n","# preds[0], preds.shape\n","# print(preds[0], preds.shape)"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"id":"6pmMGIkWHhKH","colab_type":"code","colab":{}},"source":["def nll(input, target):\n","    return -input[range(target.shape[0]), target].mean()\n","\n","loss_func = nll"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AUWwSSTcH144","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595387900536,"user_tz":-480,"elapsed":2992,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"1190e533-5ce0-451f-f04f-db09627c2ce5"},"source":["yb = y_train[0:bs]\n","print(loss_func(preds, yb))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor(11.7180, grad_fn=<NegBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cep8vePsIebu","colab_type":"code","colab":{}},"source":["def accuracy(out, yb):\n","    preds = torch.argmax(out, dim=1)\n","    return (preds == yb).float().mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wMLiKE5AIzo3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595387900538,"user_tz":-480,"elapsed":2985,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"d6e6d916-e697-4202-e98f-d0a52509a575"},"source":["print(accuracy(preds, yb))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor(0.0938)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vQWV8VHxgxGr","colab_type":"code","colab":{}},"source":["from IPython.core.debugger import set_trace\n","\n","lr = 0.5  # learning rate\n","epochs = 2  # how many epochs to train for\n","\n","for epoch in range(epochs):\n","  for i in range((n-1)//bs+1):\n","    # set_trace()\n","    start_i = i*bs\n","    end_i = start_i + bs\n","    xb = x_train[start_i:end_i]\n","    yb = y_train[start_i:end_i]\n","    pred = model(xb)\n","    loss = loss_func(pred, yb)\n","\n","    loss.backward\n","    with torch.no_grad():\n","        weights -= weights.grad * lr\n","        bias -= bias.grad * lr\n","        weights.grad.zero_()\n","        bias.grad.zero_()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IDVNrqi1jQ9i","colab_type":"text"},"source":["Refactor using torch.nn.functional\n"]},{"cell_type":"code","metadata":{"id":"faVPJf_bitQT","colab_type":"code","colab":{}},"source":["import torch.nn.functional as F\n","loss_func = F.cross_entropy\n","def model(xb):\n","  return xb @ weights + bias"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-9XN3B_-i3r7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595388166956,"user_tz":-480,"elapsed":946,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"d75ba312-4190-43e4-8d5d-6dca59b8cb96"},"source":["print(loss_func(model(xb), yb), accuracy(model(xb), yb))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor(11.7180, grad_fn=<NllLossBackward>) tensor(0.0938)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RrqvwFSujXZv","colab_type":"text"},"source":["Refactor using nn.Module\n"]},{"cell_type":"code","metadata":{"id":"FTriueEKi-n5","colab_type":"code","colab":{}},"source":["from torch import nn\n","class Mnist_Logistic(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.weights = nn.Parameter(torch.randn(784, 10)/math.sqrt(784))\n","    self.bias = nn.Parameter(torch.zeros(10))\n","\n","    def forward(self, xb):\n","      return xb @ self.weights + self.bias"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9mn9zA2Djqwb","colab_type":"code","colab":{}},"source":["model = Mnist_Logistic()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-5k4S5Y-jwPL","colab_type":"code","colab":{}},"source":["print(loss_func(model(xb), yb))\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iXXyrMk_kOHR","colab_type":"text"},"source":["Refactor using nn.Linear\n"]},{"cell_type":"code","metadata":{"id":"nfLSx3VSGQCO","colab_type":"code","colab":{}},"source":["class Mnist_Logistic(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.lin = nn.Linear(784,10)\n","\n","    def forward(self, xb):\n","      return self.lin(xb)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wUlwkD5VofJh","colab_type":"text"},"source":["把fit、get_model寫成函式"]},{"cell_type":"code","metadata":{"id":"wjG7Pqcxk6eC","colab_type":"code","colab":{}},"source":["for epoch in range(epochs):\n","  for i in range((n - 1) // bs + 1):\n","    start_i = i * bs\n","    end_i = start_i + bs\n","    xb = x_train[start_i:end_i]\n","    yb = y_train[start_i:end_i]\n","    pred = model(xb)\n","    loss = loss_func(pred, yb)\n","\n","    loss.backward()\n","    with torch.no_grad():\n","        for p in model.parameters():\n","            p -= p.grad * lr\n","        model.zero_grad()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xvx9Ee78pPny","colab_type":"code","colab":{}},"source":["from torch import optim\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T7-vtOnalY1J","colab_type":"code","colab":{}},"source":["def get_model():\n","    model = Mnist_Logistic()\n","    return model, optim.SGD(model.parameters(), lr=lr)\n","model, opt = get_model()\n","print(loss_func(model(xb), yb))\n","\n","def fit(model,opt):\n","    for epoch in range(epochs):\n","        for i in range((n - 1) // bs + 1):\n","            start_i = i * bs\n","            end_i = start_i + bs\n","            xb = x_train[start_i:end_i]\n","            yb = y_train[start_i:end_i]\n","            pred = model(xb)\n","            loss = loss_func(pred, yb)\n","\n","            loss.backward()\n","            loss.backward()\n","            opt.step()\n","            opt.zero_grad()\n","fit(model,opt)\n","print(loss_func(model(xb), yb))\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MMOCV3mEooO9","colab_type":"text"},"source":["Refactor using Dataset and DataLoader"]},{"cell_type":"code","metadata":{"id":"kPC6jArNmfV9","colab_type":"code","colab":{}},"source":["from torch.utils.data import TensorDataset"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a-Y_g4rwml6j","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595389846150,"user_tz":-480,"elapsed":1943,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"4693771d-143d-46d5-8da7-cf135c889986"},"source":["model, opt = get_model()\n","\n","for epoch in range(epochs):\n","    for i in range((n - 1) // bs + 1):\n","        xb, yb = train_ds[i * bs: i * bs + bs]\n","        pred = model(xb)\n","        loss = loss_func(pred, yb)\n","\n","        loss.backward()\n","        opt.step()\n","        opt.zero_grad()\n","\n","print(loss_func(model(xb), yb))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor(0.0821, grad_fn=<NllLossBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"w5FpOkibmysh","colab_type":"code","colab":{}},"source":["from torch.utils.data import DataLoader\n","\n","train_ds = TensorDataset(x_train, y_train)\n","train_dl = DataLoader(train_ds, batch_size=bs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p8jxM7gAm0mh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595389844199,"user_tz":-480,"elapsed":2963,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"ef018b7d-7d12-4d0a-b5ea-fa11126250d8"},"source":["model, opt = get_model()\n","\n","for epoch in range(epochs):\n","    for xb, yb in train_dl:\n","        pred = model(xb)\n","        loss = loss_func(pred, yb)\n","\n","        loss.backward()\n","        opt.step()\n","        opt.zero_grad()\n","\n","print(loss_func(model(xb), yb))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor(0.0818, grad_fn=<NllLossBackward>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"WBrb2oXUou24","colab_type":"text"},"source":["Add validation\n","\n","\n","Shuffling the training data is important to prevent correlation between batches and overfitting. On the other hand, the validation loss will be identical whether we shuffle the validation set or not. Since shuffling takes extra time, it makes no sense to shuffle the validation data.\n","\n","We’ll use a batch size for the validation set that is twice as large as that for the training set. This is because the validation set does not need backpropagation and thus takes less memory (it doesn’t need to store the gradients). We take advantage of this to use a larger batch size and compute the loss more quickly.\n"]},{"cell_type":"code","metadata":{"id":"U7twiE9NoxgB","colab_type":"code","colab":{}},"source":["train_ds = TensorDataset(x_train, y_train)\n","train_dl = DataLoader(train_ds, batch_size=bs, shuffle=True)\n","\n","valid_ds = TensorDataset(x_valid, y_valid)\n","valid_dl = DataLoader(valid_ds, batch_size=bs * 2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"H44XPlx2TKHt","colab_type":"code","colab":{}},"source":["lr = 0.5  # learning rate\n","epochs = 2  # how many epochs to train for\n","bs = 64"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LT3XciObpVfk","colab_type":"code","colab":{}},"source":["model, opt = get_model()\n","\n","for epoch in range(epochs):\n","    model.train()\n","    for xb, yb in train_dl:\n","        pred = model(xb)\n","        loss = loss_func(pred, yb)\n","\n","        loss.backward()\n","        opt.step()\n","        opt.zero_grad()\n","\n","    model.eval()\n","    with torch.no_grad():\n","        valid_loss = sum(loss_func(model(xb), yb) for xb, yb in valid_dl)\n","        \n","        \n","    print(epoch, valid_loss / len(valid_dl))\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YCR0fnt7p-AM","colab_type":"text"},"source":["Create fit() and get_data()\n"]},{"cell_type":"markdown","metadata":{"id":"pw27xXvCrcNH","colab_type":"text"},"source":["**最終實作**"]},{"cell_type":"code","metadata":{"id":"cY4mHyxyRul2","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468126868,"user_tz":-480,"elapsed":1020,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["from torch import nn\n","from torch import optim\n","import torch.nn.functional as F\n","from torch.utils.data import TensorDataset\n","from torch.utils.data import DataLoader\n"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"LP6fRrqesNVw","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468128953,"user_tz":-480,"elapsed":686,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["class Mnist_Logistic(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.lin = nn.Linear(784,10)\n","\n","    def forward(self, xb):\n","      return self.lin(xb)"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"id":"iZLD4_ERSmq9","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468131341,"user_tz":-480,"elapsed":995,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["loss_func = F.cross_entropy"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"DX3Zk84xrnU4","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468133062,"user_tz":-480,"elapsed":889,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["def get_model():\n","    model = Mnist_Logistic()\n","    return model, optim.SGD(model.parameters(), lr=lr)"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"VJ5n0euNqABJ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468137742,"user_tz":-480,"elapsed":898,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["def loss_batch(model, loss_func, xb, yb, opt=None):\n","  loss = loss_func(model(xb), yb)\n","\n","  if opt is not None:\n","    loss.backward()\n","    opt.step()\n","    opt.zero_grad()\n","  \n","  return loss.item(), len(xb)"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"0bv5oBOKqZch","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468779661,"user_tz":-480,"elapsed":913,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["def fit(epochs, model, loss_func, opt, train_dl, valid_dl):\n","  for epoch in range(epochs):\n","    model.train()\n","    for xb, yb in train_dl:\n","      loss_batch(model, loss_func, xb, yb, opt)\n","\n","    model.eval()\n","    with torch.no_grad():\n","      losses, nums = zip(                \n","          *[loss_batch(model, loss_func, xb, yb) for xb, yb in valid_dl]\n","      )\n","    #zip + * 把兩個元素一組的陣列轉化成左右兩個陣列\n","    val_loss = np.sum(np.multiply(losses, nums)) / np.sum(nums)\n","    #multiply為內積，把每個batch的loss乘上各自的batch數目(因最後一組數字不同)，再除以總數\n","    print(epoch, val_loss)"],"execution_count":54,"outputs":[]},{"cell_type":"code","metadata":{"id":"5LBlDVoRrQzT","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595468214343,"user_tz":-480,"elapsed":1029,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["def get_data(train_ds, valid_ds, bs):\n","    return (\n","        DataLoader(train_ds, batch_size=bs, shuffle=True),\n","        DataLoader(valid_ds, batch_size=bs * 2),\n","    )"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"wrIiR6hfrVRn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1595468218885,"user_tz":-480,"elapsed":3483,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"26e93a1f-11bc-4f36-8318-afc6e3072c5f"},"source":["train_dl, valid_dl = get_data(train_ds, valid_ds, bs)\n","model, opt = get_model()\n","fit(epochs, model, loss_func, opt, train_dl, valid_dl)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["0 0.3224795442700386\n","1 0.31112100045681\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wXU2egW1Gr-U","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595487755414,"user_tz":-480,"elapsed":907,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["class Mnist_CNN(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1)\n","    self.conv2 = nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1)\n","    self.conv3 = nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1)\n","\n","    def forward(self, xb):\n","        xb = xb.view(-1, 1, 28, 28)\n","        xb = F.relu(self.conv1(xb))\n","        xb = F.relu(self.conv2(xb))\n","        xb = F.relu(self.conv3(xb))\n","        xb = F.avg_pool2d(xb, 4)\n","        return xb.view(-1, xb.size(1))\n","\n"],"execution_count":65,"outputs":[]},{"cell_type":"code","metadata":{"id":"ghq4okfpfAnf","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595487994806,"user_tz":-480,"elapsed":995,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1)\n","conv2 = nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1)\n","conv3 = nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1)\n"],"execution_count":86,"outputs":[]},{"cell_type":"code","metadata":{"id":"3ngNmSgJd3UI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595488754996,"user_tz":-480,"elapsed":915,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"3fd01f00-d8ad-4a1b-ba07-6989e84b6e49"},"source":["xb2 = xb.view(-1, 1, 28, 28) #64x1x28x28 64個sample 一個channel(灰階)、28x28的\n","xb2 = F.relu(conv1(xb2)) #64x16x14x14 16個channel(16個feature map)、14x14的圖\n","xb2 = F.relu(conv2(xb2)) #64x16x7x7 16個channel(16個feature map)、7x7的圖\n","xb2 = F.relu(conv3(xb2)) #64x10x4x4 10個channel(10個feature map)、4x4的圖\n","xb2 = F.avg_pool2d(xb2, 4) #64x10x1x1 10個chammel 1x1的圖\n","xb2 = xb2.view(-1, xb2.size(1))\n","xb2.shape"],"execution_count":120,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([64, 10])"]},"metadata":{"tags":[]},"execution_count":120}]},{"cell_type":"code","metadata":{"id":"XMoz2A43d_bg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595487635718,"user_tz":-480,"elapsed":948,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"773307fd-685d-4948-ed10-efaea331fb92"},"source":["xb.view(-1, 1, 28, 28).shape\n"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([64, 1, 28, 28])"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"markdown","metadata":{"id":"vE7POXWUiU0P","colab_type":"text"},"source":["handy class we can use to simply our code: nn.Sequential\n"]},{"cell_type":"code","metadata":{"id":"6x13JJ72iZTw","colab_type":"code","colab":{}},"source":["class Lambda(nn.Module):\n","    def __init__(self, func):\n","        super().__init__()\n","        self.func = func\n","\n","    def forward(self, x):\n","        return self.func(x)\n","\n","\n","def preprocess(x):\n","    return x.view(-1, 1, 28, 28)\n","\n","\n","model = nn.Sequential(\n","  Lambda(preprocess),\n","  nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n","  nn.ReLU(),\n","  nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n","  nn.ReLU(),\n","  nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n","  nn.ReLU(),\n","  nn.AvgPool2d(4),\n","  Lambda(lambda x: x.view(x.size(0), -1)),\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kGPvJQThjUs_","colab_type":"text"},"source":["Wrapping DataLoader\n","\n","Let’s get rid of these two assumptions, so our model works with any 2d single channel image. First, we can remove the initial Lambda layer but moving the data preprocessing into a generator:\n","\n","Next, we can replace nn.AvgPool2d with nn.AdaptiveAvgPool2d, which allows us to define the size of the output tensor we want, rather than the input tensor we have. As a result, our model will work with any size input."]},{"cell_type":"code","metadata":{"id":"cWD6uOPCjvRg","colab_type":"code","colab":{}},"source":["def preprocess(x, y):\n","    return x.view(-1, 1, 28, 28), y\n","    \n","class WrappedDataLoader:\n","    def __init__(self, dl, func):\n","        self.dl = dl\n","        self.func = func\n","\n","    def __len__(self):\n","        return len(self.dl)\n","\n","    def __iter__(self):\n","        batches = iter(self.dl)\n","        for b in batches:\n","            yield (self.func(*b))\n","\n","train_dl, valid_dl = get_data(train_ds, valid_ds, bs)\n","train_dl = WrappedDataLoader(train_dl, preprocess)\n","valid_dl = WrappedDataLoader(valid_dl, preprocess)\n","\n","model = nn.Sequential(\n","    nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n","    nn.ReLU(),\n","    nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n","    nn.ReLU(),\n","    nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n","    nn.ReLU(),\n","    nn.AdaptiveAvgPool2d(1),\n","    Lambda(lambda x: x.view(x.size(0), -1)),\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cOoqX0q5rJYV","colab_type":"text"},"source":["Tensorflow實作"]},{"cell_type":"code","metadata":{"id":"yGW2pHejpEqH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595490649365,"user_tz":-480,"elapsed":897,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"ea32e2e3-a04a-4c84-98d7-d86e660f02b3"},"source":["x_train_tf=x_train_tf.reshape(50000,28,28,1)\n","x_train_tf.shape"],"execution_count":131,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(50000, 28, 28, 1)"]},"metadata":{"tags":[]},"execution_count":131}]},{"cell_type":"code","metadata":{"id":"ZNfuYRa6qxhc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595490951360,"user_tz":-480,"elapsed":1672,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"4d071217-de06-4e7c-966a-aead17293d77"},"source":["x_valid_tf=x_valid.reshape(10000,28,28,1)\n","x_valid_tf.shape"],"execution_count":138,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 28, 28, 1)"]},"metadata":{"tags":[]},"execution_count":138}]},{"cell_type":"code","metadata":{"id":"yrotlrF1p8se","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595490688842,"user_tz":-480,"elapsed":2733,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras import datasets, layers, models\n","import matplotlib.pyplot as plt"],"execution_count":132,"outputs":[]},{"cell_type":"code","metadata":{"id":"kC0ogx-bp_HX","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595490730487,"user_tz":-480,"elapsed":890,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}}},"source":["model = models.Sequential()\n","model.add(layers.Conv2D(28, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(56, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(56, (3, 3), activation='relu'))\n","\n","model.add(layers.Flatten())\n","model.add(layers.Dense(56, activation='relu'))\n","model.add(layers.Dense(10))"],"execution_count":133,"outputs":[]},{"cell_type":"code","metadata":{"id":"TxKPaJIvqjBV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595490845106,"user_tz":-480,"elapsed":989,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"d2e16ee8-8f2e-40bd-b5d2-4757d0194e9c"},"source":["y_train"],"execution_count":134,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5, 0, 4, ..., 8, 4, 8])"]},"metadata":{"tags":[]},"execution_count":134}]},{"cell_type":"code","metadata":{"id":"Uuwy087uqIT3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":377},"executionInfo":{"status":"ok","timestamp":1595491412832,"user_tz":-480,"elapsed":439807,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"4efeeb15-fd3b-4258-edab-4d223218b3cd"},"source":["model.compile(optimizer='adam',\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","              metrics=['accuracy'])\n","\n","history = model.fit(x_train_tf, y_train, epochs=10, \n","                    validation_data=(x_valid_tf, y_valid))"],"execution_count":139,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.1792 - accuracy: 0.9435 - val_loss: 0.0620 - val_accuracy: 0.9814\n","Epoch 2/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.0554 - accuracy: 0.9831 - val_loss: 0.0695 - val_accuracy: 0.9796\n","Epoch 3/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.0391 - accuracy: 0.9875 - val_loss: 0.0452 - val_accuracy: 0.9872\n","Epoch 4/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.0294 - accuracy: 0.9904 - val_loss: 0.0429 - val_accuracy: 0.9877\n","Epoch 5/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.0242 - accuracy: 0.9923 - val_loss: 0.0417 - val_accuracy: 0.9894\n","Epoch 6/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.0201 - accuracy: 0.9932 - val_loss: 0.0421 - val_accuracy: 0.9887\n","Epoch 7/10\n","1563/1563 [==============================] - 44s 28ms/step - loss: 0.0164 - accuracy: 0.9948 - val_loss: 0.0420 - val_accuracy: 0.9892\n","Epoch 8/10\n","1563/1563 [==============================] - 43s 28ms/step - loss: 0.0132 - accuracy: 0.9957 - val_loss: 0.0445 - val_accuracy: 0.9879\n","Epoch 9/10\n","1563/1563 [==============================] - 43s 28ms/step - loss: 0.0106 - accuracy: 0.9963 - val_loss: 0.0431 - val_accuracy: 0.9889\n","Epoch 10/10\n","1563/1563 [==============================] - 43s 28ms/step - loss: 0.0113 - accuracy: 0.9961 - val_loss: 0.0408 - val_accuracy: 0.9897\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"s2Js2oZPqp50","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}