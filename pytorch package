{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"pytorch package","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNyZKZ3ih/FQq3+5E+qmaL3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"d43708a556be478c8934cf3d6dd7288f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_a74579b6363e4dcfa76f638ff0a452ea","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_58a28ddaff4a45e49933d3d9364ede36","IPY_MODEL_41fd4e21ff914bf388551a82d53bdbe6"]}},"a74579b6363e4dcfa76f638ff0a452ea":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"58a28ddaff4a45e49933d3d9364ede36":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_74cab505251d4bcfa460f4aa4f219512","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":46827520,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":46827520,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6a74a49b6db043a8acffdc1d60685356"}},"41fd4e21ff914bf388551a82d53bdbe6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_2b243f11b5c6462fa89d55c9df32ee78","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 44.7M/44.7M [04:18&lt;00:00, 181kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ba0e0e04f16a45d5b3099fd7db7be140"}},"74cab505251d4bcfa460f4aa4f219512":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"6a74a49b6db043a8acffdc1d60685356":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2b243f11b5c6462fa89d55c9df32ee78":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"ba0e0e04f16a45d5b3099fd7db7be140":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"Lbgjd9jBGHfR"},"source":["Autograd"]},{"cell_type":"code","metadata":{"id":"U4IL9fIzCOOK","executionInfo":{"status":"ok","timestamp":1602078372435,"user_tz":-480,"elapsed":4000,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"0cd106dc-0bdf-4ba2-e958-2aa4a9519fca","colab":{"base_uri":"https://localhost:8080/"}},"source":["import torch\n","from torch.autograd import Variable\n","x = Variable(torch.randn(5,5))\n","y = Variable(torch.randn(5,5))\n","z = Variable(torch.randn(5,5), requires_grad=True)\n","a = x + y\n","a.requires_grad\n","b = a + z\n","b.requires_grad"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"Ik7CX8ZEDLAe","executionInfo":{"status":"ok","timestamp":1602078375567,"user_tz":-480,"elapsed":1961,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"65f30db8-e42f-492f-e011-3c3ced07b76e","colab":{"base_uri":"https://localhost:8080/","height":83,"referenced_widgets":["d43708a556be478c8934cf3d6dd7288f","a74579b6363e4dcfa76f638ff0a452ea","58a28ddaff4a45e49933d3d9364ede36","41fd4e21ff914bf388551a82d53bdbe6","74cab505251d4bcfa460f4aa4f219512","6a74a49b6db043a8acffdc1d60685356","2b243f11b5c6462fa89d55c9df32ee78","ba0e0e04f16a45d5b3099fd7db7be140"]}},"source":["import torchvision\n","import torch.nn as nn\n","import torch.optim as optim\n","model =torchvision.models.resnet18(pretrained=True)\n","for param in model.parameters():\n","  param.requires_grad = False\n","\n","model.fc = nn.Linear(512, 100) \n","\n","optimizer = optim.SGD(model.fc.parameters(), lr = 1e-2, momentum=0.9)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading: \"https://download.pytorch.org/models/resnet18-5c106cde.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth\n"],"name":"stderr"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d43708a556be478c8934cf3d6dd7288f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=46827520.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gJVL_kzHEErG","executionInfo":{"status":"ok","timestamp":1600061160024,"user_tz":-480,"elapsed":1669,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"7c48cf70-96a3-457e-9ccf-ab469a628669","colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["regular_input = Variable(torch.randn(5,3,5,5))\n","volatile_input = Variable(torch.randn(5,5,5,5), volatile=True)\n","model = torchvision.models.resnet18(pretrained = True)\n","model(regular_input).requires_grad"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: UserWarning: volatile was removed and now has no effect. Use `with torch.no_grad():` instead.\n","  \n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"Amndo4tCCy65"},"source":["Torch"]},{"cell_type":"markdown","metadata":{"id":"G9hjm7hEGLTg"},"source":["* torch.is_tensor(obj)\n","* torch.is_storage(obj)\n","* torch.set_default_tensor_type(t)\n","* torch.numels(input)"]},{"cell_type":"code","metadata":{"id":"x_v3oXP3GzYV","executionInfo":{"status":"ok","timestamp":1600061668811,"user_tz":-480,"elapsed":1001,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"d2a726c1-d91c-4f8c-8708-749fbf088896","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = torch.randn(1,2,3,4,5)\n","torch.numel(a)\n","a = torch.zeros(4,4)\n","torch.numel(a)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["16"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"gCnXhB-nG4f2"},"source":["torch.set_printpotions(precision=None, threshold=None, egdeitems=None, linewidth=None, profile=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2_I7XphOHNX9"},"source":["* precision – 浮点数输出的精度位数 (默认为8 )\n","* threshold – 阈值，触发汇总显示而不是完全显示(repr)的数组元素的总数 （默认为1000）\n","* edgeitems – 汇总显示中，每维（轴）两端显示的项数（默认值为3）\n","* linewidth – 用于插入行间隔的每行字符数（默认为80）。Thresholded * * matricies will ignore this parameter.\n","* profile – pretty打印的完全默认值。 可以覆盖上述所有选项 (默认为short, full)\n","\n"]},{"cell_type":"code","metadata":{"id":"YJ29wRRDHYF0","executionInfo":{"status":"ok","timestamp":1600061848651,"user_tz":-480,"elapsed":1125,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"16195076-c780-4be7-d7be-0a9c3a53f0c0","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["torch.eye(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1., 0., 0.],\n","        [0., 1., 0.],\n","        [0., 0., 1.]])"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"PNth9yVLHmb7","executionInfo":{"status":"ok","timestamp":1600061936897,"user_tz":-480,"elapsed":910,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"f3da591b-cf74-4332-e611-a43c6aeb6b0c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import numpy\n","a = numpy.array([1,2,3])\n","t = torch.from_numpy(a)\n","t\n","t[0]=-1\n","a"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1,  2,  3])"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"ETh5JhJOIBYR","executionInfo":{"status":"ok","timestamp":1600061984084,"user_tz":-480,"elapsed":575,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"a835b0a0-d9fe-44a1-8cf5-1420f526a6d4","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["torch.linspace(3,10,steps=4)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([ 3.0000,  5.3333,  7.6667, 10.0000])"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"CI4zg0xYIGRR","executionInfo":{"status":"ok","timestamp":1600062026066,"user_tz":-480,"elapsed":990,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"53b5d8fc-275a-45f8-b6c6-41b7dd5cc880","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["torch.logspace(1,5,steps=3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1.0000e+01, 1.0000e+03, 1.0000e+05])"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"7ENhovg9IQKJ","executionInfo":{"status":"ok","timestamp":1600062046929,"user_tz":-480,"elapsed":1099,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"1f4ca465-d0e0-455d-e084-e3ff017c52c2","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["torch.ones(2,3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1., 1., 1.],\n","        [1., 1., 1.]])"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"qlZleIfQIWcS","executionInfo":{"status":"ok","timestamp":1600062088718,"user_tz":-480,"elapsed":965,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"0ab590da-5fd1-493b-d62e-7ad661170a33","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["torch.rand((5,5))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.6581, 0.5953, 0.5854, 0.7443, 0.5579],\n","        [0.0079, 0.0833, 0.6072, 0.7261, 0.2327],\n","        [0.4903, 0.6780, 0.8578, 0.3227, 0.6488],\n","        [0.4335, 0.9959, 0.6233, 0.5292, 0.0111],\n","        [0.7555, 0.9846, 0.7958, 0.2282, 0.0164]])"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"15myl3MYIttI","executionInfo":{"status":"ok","timestamp":1600062227077,"user_tz":-480,"elapsed":972,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"6b66d989-e9df-423e-83e4-1baa8e40a959","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["torch.randn(5,5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[-1.3004, -0.6562, -0.0644,  1.8876,  0.0151],\n","        [ 1.4343, -0.3267, -0.5818, -0.7983, -1.8729],\n","        [-0.8810,  1.6154,  0.9687,  0.8074, -0.4878],\n","        [-0.6110,  0.7294,  0.0887,  1.5581, -1.5945],\n","        [ 0.0406, -1.3087,  0.6795, -1.0330, -0.2729]])"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"wX0zoZJmIl7Z","executionInfo":{"status":"ok","timestamp":1600062238322,"user_tz":-480,"elapsed":1060,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"b46d2e16-8bec-423e-cecc-26cd780051dd","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["torch.randperm(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1, 0, 2, 4, 3])"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"MmkErMKOJDZJ","executionInfo":{"status":"ok","timestamp":1600062262991,"user_tz":-480,"elapsed":967,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"50a3643a-2127-4eed-8476-121103921f0b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["torch.arange(1,10,3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1, 4, 7])"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"y21vRZk2JJkW","executionInfo":{"status":"ok","timestamp":1602078439814,"user_tz":-480,"elapsed":882,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"e57ec5bf-f138-4793-f4b6-b9afa8495ee5","colab":{"base_uri":"https://localhost:8080/"}},"source":["x = torch.randn(2,3)\n","torch.cat((x,x,x),1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[-1.6215, -1.5516,  0.7450, -1.6215, -1.5516,  0.7450, -1.6215, -1.5516,\n","          0.7450],\n","        [-0.4122,  0.5188, -1.3917, -0.4122,  0.5188, -1.3917, -0.4122,  0.5188,\n","         -1.3917]])"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"kZgRoDkMJhRf","executionInfo":{"status":"ok","timestamp":1600062450265,"user_tz":-480,"elapsed":987,"user":{"displayName":"黃鈺倫 Intern","photoUrl":"","userId":"07415287677551779104"}},"outputId":"e91fb7f4-e4fa-4587-8790-e2a2ebbba05e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["torch.chunk(x, 2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.4024, 0.1220, 0.6673]]), tensor([[-0.7900, -0.4930, -0.1812]]))"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"qToyKvQ9W63h"},"source":["Dataset\n","1. init\n","2. getitem\n","3. len\n","\n","* transform: 數據增強是覆蓋原圖，不會產生新圖片，每次傳入的都可能不一樣，達到樣本多樣性\n","* 通常都以 [圖片網址 label] 的形式將數據存在txt檔中"]},{"cell_type":"code","metadata":{"id":"ZeLdTy0LJ3lU"},"source":["#tool.py\n","from PIL import Image\n","from torch.utils.data import Dataset\n","# 通常都把[圖片網址 label]存在txt檔中\n","class MyDataset(Dataset):\n","  def __init__(self, txt_path, transform = None, target_transform = None):\n","    fh = open(txt_path, 'r')\n","    imgs = []\n","    for line in fh:\n","      line = line.rstrip()\n","      words = line.split()\n","      imgs.append((words[0], int(words[1])))\n","    self.imgs = imgs\n","    self.transform = transform\n","    self.target_transform = target_transform\n","\n","  def __getitem__(self, index):\n","    fn, label = self.imgs[index]\n","    img = Image.open(fn).convert('RGB')\n","    if self.transform is not None:\n","      img = self.transform(img)\n","    return img, label\n","\n","  def __len__(self):\n","    return len(self.imgs)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PrUdlryQXsLM"},"source":["DataLoader來拼接、讀取資料\n","\n","需要注意的地方\n","1. 通道順序 RGB? BGR?\n","2. 圖片是 w h c? c w h?\n","3. 像素值範圍 0-1? 0-255?\n","就要去查看MyDataset的\\_\\_getitem__"]},{"cell_type":"code","metadata":{"id":"iIXr79oYX_tv"},"source":["#簡化版\n","# main.py\n","train_data = MyDataset(txt_path = train_data_path,...)\n","train_loader = DataLoader(dataset = train_data,...)\n","for i, data in enumerate(train_loader, 0):\n","  inputs, labels = data\n","  inputs, labels = Variable(inputs), Variable(labels) #把數據轉成Variable類型才能當作真的輸入\n","\n","outputs = net(inputs) #net為我們建立的model\n","\n","# dataloader.py pytorch預設\n","class DataLoader():\n","  def __iter__(self):\n","    return _DataLoaderIter()\n","class _DataLoaderIter():\n","  def __next__(self):\n","    batch = self.collate_fn([self.dataset[i] for i in indices]) \n","    #產生batch、讀取一個batch的數據\n","    #collate中會調用MyDataset的__getitem__函數獲得處理過的圖片\n","    #返回的batch有兩個元素，第一個是圖片數據 shape: (batch_size, RGB channels=3, w, h)\n","    #第二個是Label shape:(batch_sizex1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HIMi5czudzCj"},"source":["Transform具體使用\n","1. toTensor()會對數據進行img.transpose(0,1).transpose(0.2).contiguous() h\\*w\\*c -> c\\*h\\*w，再除以255規一化至0-1\n"]},{"cell_type":"code","metadata":{"id":"SNiRWgevd2Uh"},"source":["#main.py\n","\n","normMean = [0.4948052, 0.48568845, 0.44682974] #通過對訓練集計算得出\n","normStd = [0.24580306, 0.24236229, 0.2603115] #通過對訓練集計算得出\n","normTransform = transforms.Normalize(normMean, normStd) #將已經除以255的像素值(目前為0-1)再減去normMean再除以normStd\n","trainTransform = transforms.Compose([\n","                                     transforms.Resize(32),\n","                                     transforms.RandomCrop(32, padding=4),\n","                                     transforms.toTensor(),\n","                                     normTransforms\n","])\n","\n","validTransform = transforms.Compose([\n","                                     transforms.toTensor()\n","                                     normTransforms\n","])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RhRCG71LgvEn"},"source":["#compute_mean.py\n","import numpy as np\n","import cv2\n","import random\n","import os\n","\"\"\"\n","    随机挑选CNum张图片，进行按通道计算均值mean和标准差std\n","    先将像素从0～255归一化至 0-1 再计算\n","\"\"\"\n","train_txt_path = os.path.join(\"..\",\"..\",\"Data/train.txt\")\n","\n","CNum = 2000\n","img_h, img_w = 32, 32\n","imgs = np.zeros([img_w, img_h, 3, 1])\n","means, stdevs = [], []\n","with open(train_txt_path, 'r') as f:\n","  lines = f.readlines()\n","  random.shuffle(lines) #亂序\n","\n","  for i in range(CNums):\n","    img_path = lines[i].rstrip().split()[0]\n","\n","    img = cv2.imread(img_path) #h, w, c=BGR\n","    img = cv2.resize(img, (img_h, img_w)) # new_h, new_w, c\n","\n","    img = img[:, :, :, np.newaxis]\n","    imgs = np.concatenate((imgs, img), axis = 3)\n","    print(i)\n","\n","imgs = imgs.astype(np.float32)/255.\n","\n","for i in range(3):\n","  pixels = imgs[:,:,i,:].ravel() #拉成一維陣列\n","  means.append(np.mean(pixels))\n","  stdevs.append(np.std(pixels))\n","\n","means.reverse() #BGR-->RGB\n","stdevs.reverse()\n","\n","print(\"normMean = {}\".format(means))\n","print(\"normStd = {}\".format(stdevs))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4DQduxtRlG0i"},"source":["imgs = np.zeros([img_w, img_h, 3, 1])\n","imgs_ = np.ones([img_w, img_h, 3, 1])\n","imgs = np.concatenate((imgs, imgs_), axis=3)\n","imgs = np.concatenate((imgs, imgs_), axis=3)\n","imgs = np.concatenate((imgs, imgs_), axis=3)\n","pixel = imgs[:,:,1,:]\n","pixel"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"plvHcxQ0ndXm"},"source":["模型\n","\n","1. \\_\\_init__\n","2. \\_\\_forward__\n","3. nn.Sequential 為一容器，將一系列操作按先後順序包起來，參數非List\n"]},{"cell_type":"code","metadata":{"id":"yHjscokEnfUK"},"source":["#main.py\n","class Net(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.conv1 = nn.Conv2d(3,6,5)\n","    self.pool1 = nn.MaxPool2d(2,2)\n","    self.conv2 = nn.Conv2d(6,16,5)\n","    self.pool2 = nn.MaxPool2d(2,2)\n","    self.fc1 = nn.Linear(16*5*5,120) #h*w = 32*32 ->28*28 ->14*14 ->10*10 ->5*5 => 攤平後=5*5*16\n","    self.fc2 = nn.Linear(120,84)\n","    self.fc3 = nn.Linear(84,10)\n","\n","  def forward(self, x):\n","    x = self.pool1(F.relu(self.conv1(x)))\n","    x = self.pool2(F.relu(self.conv2(x)))\n","    x = x.view(-1, 16*5*5)\n","    x = F.relu(self.fc1(x))\n","    x = F.relu(self.fc2(x))\n","    x = self.fc3(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y4P4eGXRqQfB"},"source":["#定義複雜模型\n","class ResidualBlock(nn.Module):\n","  def __init__(self, inchannel, outchannel, stride=1, shortcut=None):\n","    super().__init__()\n","    self.left = nn.Sequential(\n","        nn.Conv2d(inchannel, outchannel, 3, stride, 1, bias=False),\n","        nn.BatchNorm2d(outchannel),\n","        nn.ReLU(inplace=True),\n","        nn.Conv2d(outchannel, outchannel, 3, 1, 1, bias=False),\n","        nn.BatchNorm2d(outchannel)\n","    )\n","\n","    self.right = shortcut\n","\n","  def forward(self, x):\n","    out = self.left(x)\n","    residual = x if self.right is None else self.right(x)\n","    out += residual # output = x+ h(x)\n","    return F.relu(out)\n","\n","\n","class ResNet34(BasicModule):\n","  '''\n","  实现主 module：ResNet34\n","  ResNet34 包含多个 layer，每个 layer 又包含多个 Residual block\n","  用子 module 来实现 Residual block，用_make_layer 函数来实现 layer\n","  ''' \n","  def __init__(self, num_classes=2):\n","    super().__init__()\n","    self.model_name = 'resnet34'\n","  \n","  # 前几层: 图像转换\n","  self.pre = nn.Sequential(\n","      nn.Conv2d(3, 64, 7, 2, 3, bias=False)\n","      nn.BatchNorm2d(64),\n","      nn.ReLU(inplace=True),\n","      nn.MaxPool2d(3 2, 1)\n","  )\n","  # 重复的 layer，分别有 3，4，6，3 个 residual block\n","  self.layer1 = self._make_layer(64, 128, 3)\n","  self.layer2 = self._make_layer(128, 256, 4, stride=2)\n","  self.layer3 = self._make_layer(256, 512, 6, stride=2)\n","  self.layer4 = self._make_layer(512, 512,34, stride=2)\n","\n","  #分类用的全连接 \n","  self.fc = nn.Linear(512, num_classes)\n","\n","  def _make_layer(self, inchannel, outchannel, block_num, stride=1):\n","    '''\n","    构建 layer,包含多个 residual block\n","    '''\n","    shortcut = nn.Sequential(\n","        nn.Conv2d(inchannel, outchannel, 1, stride, bias=False),\n","        nn.BatchNorm2d(outchannel)\n","    )\n","    layers=[]\n","    layers.append(ResidualBlock(inchannel, outchannel,stride, shortcut))\n","    for i in range(1, block_num):\n","      layers.append(ResidualBlock(outchannel, outchannel))\n","\n","    return nn.Sequential(*layers)\n","\n","  def forward(self, x):\n","    x = self.pre(x)\n","    x = self.layer1(x)\n","    x = self.layer2(x)\n","    x = self.layer3(x)\n","    x = self.layer4(x)\n","\n","    x = F.avg_pool2d(x, 7)\n","    x = x.view(x.size(0),-1)\n","    return self.fc(x)\n","\n","\n","\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nL7u0aF7xAat"},"source":["權值初始化\n","* 第一步，先设定什么层用什么初始化方法，初始化方法在 torch.nn.init 中给出；\n","* 第二步，实例化一个模型之后，执行该函数，即可完成初始化。"]},{"cell_type":"code","metadata":{"id":"Z1yVmif_xC7c"},"source":["#main.py\n","def initialize_weights(self):\n","  for m in self.modules():\n","    if isinstance(m, nn.Conv2d):\n","      torch.nn.init.xavier_normal(m.weight.data)\n","      if m.bias is not None:\n","        m.bias.data.zero_()\n","    elif isinstance(m, nn.BatchNorm2d):\n","      m.weight.data.fill_(1)\n","      m.bias.data.zero_()\n","    elif isinstance(m, nn.Linear):\n","      torch.nn.init.normal(m.weight.data, 0, 0.01)\n","      m.bias.data.zero_()\n","#self.modules:\n","#torch/nn/modules/module.py\n","def modules(self):\n","  for name, module in self.name_modules():\n","    yield module\n","    # 功能是：Returns an iterator over all modules in the network. 能依次返回模型中的各层"],"execution_count":null,"outputs":[]}]}